Çok bilimsel bir cevap olmayacak ancak mantığını kısaca açıklamak istiyorum.
```
>>> 1e+17+1==1e+17
True
```
Burada şunu fark etmek lazım ki ``1e+17`` bir ``float``tır.
````
>>> type(1e+17)
<class 'float'>
````
Şimdi cok büyük bir integer düşünelim. Mesela ``12371293871293126928389``
Bu ``int`` hafızada tam olarak doğru saklanabilmektedir, tabii ki biraz fazla alan kapsar. Bunun byte hali şu şekilde:
````
>>> bin(12371293871293126928389)
'0b10100111101010011000110000111101100000010001011001111011111110100000000101'
````
Ancak ne kadar fazla alan kapsarsa kapsasın tam sayılar hafızada tam olarak doğru saklanabilmektedir. Saklama işlemi doğru yapıldığı için karşılaştırma işlemleri de büyük ``float``ların tersine doğru yapılmaktadır. Çok büyük sayılarla bir örnek verelim:
````
>>> a=87394612093462103497126093471260349126497132640927469264129046012348
961209346210934812609436209346209374602197364102794620917461029346120937460209734620198410396409273601972019460127462046029346
>>> b = a + 1
>>> a==b
False
````
Gördüğünüz gibi integer ne kadar büyük olursa olsun hafıza ile ilgili bir problem yaşanmaz ise doğru sonuç veriliyor. Çünkü tam sayılar onluk sistemden ikili sisteme tam olarak doğru çevrilebiliyor.
Şimdi ``float``lar ile bir örnek verelim:
````
>>> a=1e+17
>>> b = a + 1
>>> a==b
True
````
Sonuç yanlış oldu. Burada işlemlerin doğru yapılması konusunda bir büyüklük sınırı var tabii. Şu işlem doğru çalışıyor mesela:
````
>>> a=1e15
>>> b = a+1
>>> a==b
False
````
Ki bu sınır ```float``lar ile alakalı genel bir sınır. Programlama dilinin ``float``ları hafızada nasıl depolamayı seçmesi ile alakalı. Şimdi biz düşününce yukarıdaki ``1e17`` bir tam sayı olarak ifade edilebileceği için işlemlerin yanlış olması saçma geliyor, ancak hafıza ```float`` olarak saklanıyor. Ve dediğim gibi bu ``float``ların nasıl saklandığı ile alakalı. Şimdi daha güzel bir örnek vererlim:
````
>>> 1.90928309802398974
1.9092830980239897
````
Bakın, girdiğimiz ``float``ın sonundaki ``4`` python tarafından kesildi. Değimim gibi bu dili yazarkenki seçimleriniz ile alakalı, ne kadar çok basamak saklarsanız o kadar çok hafıza kullanılıyor. Şimdi burada ``4`` otomatik olarak kesiliyor, yani hafızaya kaydedilmiyor. Bu da şuna sebeb oluyor:
````
>>> a = 1.90928309802398974
>>> a = 1.90928309802398973
>>> a==b
True
````
Burada a'nın sonundaki ``4`` ve b'nin sonundaki ``3`` kesiliyor (daha dorusu yuvarlanıyor), bu yüzden a ve b birbirine eşit olmuş oluyor. Çünkü aslında bizim atadığımız değere **tam olarak eşit değiller**. Şimdi burada şöyle bir şeye dikkat edelim:
````
>>> 1.90928309802398973
1.9092830980239897
>>> len("1.9092830980239897")
18
>>> len("9092830980239897") # 1. dan sonrası
16
>>> 19092830980239897e-16
1.9092830980239897
````
Bakın, aslında e den sonra gelen sayının negatif veya pozitif olması fark etmiyor. Çünkü ikisi de ``float`` ve ikisi de bir yerden sonra eksik kaydediliyor. Fark ettiyseniz buradaki e den sonra gelen 16 kaydedilen maksimum basamaktır. Yani virgülden sonra en fazla 16 basamak saklanıyor:
````
>>> 19092830980239897e-16
1.9092830980239897
>>> 19092830980239897e-17
0.19092830980239897
````
Ama şimdi e-17 de doğru çalıştı :D ?? Burada iki şeyi kaçırıyoruz. Birincisi biz 10 luk tabandaki virgülün yerini e üzerinden düşünüyoruz. Ancak bu işlemler 2 lik sistemde gerçekleşiyor. Yani gerçek sınır arada bir yerde olabilir. İkincisi yine ``float``ların saklanma şekli. şunu söylemek kazım ki ``float``ımız ne olursa olsun hep 24 byte kaplıyor, yani gerekirse o boyuta kadar kırpılıyor:
````
>>> 19092830980239897e-16
1.9092830980239897
>>> 19092830980239897e-17
0.19092830980239897
>>> import sys
>>> sys.getsizeof(1.9092830980239897)
24
>>> sys.getsizeof(0.19092830980239897)
24
````
Hatta:
````
>>> sys.getsizeof(123137983279123721983719238271938)
40
>>> sys.getsizeof(123137983279123721983719238271938.0)
24
````
İşte bu yüzden bu oluyor:
````
>>> 123137983279123721983719238271938.0
1.2313798327912373e+32
````
Burda gene bir şey dikkat çekmekte


``float`` lar hafızada saklanırken ise şöyle bir yöntem uygulanmaktadìr.




Şu resmi dökümana bakabilirsiniz: https://docs.python.org/3/tutorial/floatingpoint.html

Konuyla ilgili şu videoyu da öneriyorum:
https://www.youtube.com/watch?v=PZRI1IfStY0
